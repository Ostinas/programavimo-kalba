statements      : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement       : KEYWORD: return expr?
                : KEYWORD: continue
                : KEYWORD: break
                : expr

expr            : KEYWORD: var IDENTIFIER EQ expr
                : comp_exp ((KEYWORD:and|KEYWORD:or) comp_exp)*

comp_exp        : not comp_exp
                : arith_exp ((EE|LT|GT|LTE|GTE) arith_exp)*

arith_exp       : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV) factor)*

factor          : (PLUS|MINUS) factor
                : power
                : modulo

power           : call (POW factor)*

modulo          : call (MOD factor)*

call            : atom (LPAREN ( expr (COMMA expr)*)? RPAREN)?

atom            : INT|FLOAT|STRING|IDENTIFIER
                : LPAREN expr RPAREN
                : list_exp
                : if_exp
                : for_exp
                : while_exp
                : func_def

list_exp        : LSQUARE ( expr (COMMA expr)*)? RSQUARE

if_exp          : KEYWORD: if expr KEYWORD:then
                  (statement if_expr_b|if_expr_c?)
                | (NEWLINE statements KEYWORD:end|if_expr_b|if_expr_c)

if_exp_b        : KEYWORD: elseif expr KEYWORD:THthenEN
                  (statement if_expr_b|if_expr_c?)
                | (NEWLINE statements KEYWORD:end|if_expr_b|if_expr_c)

if_exp_c        : KEYWORD: else statement
                | (NEWLINE statements KEYWORD:end)

for_exp         : KEYWORD: for IDENTIFIER EQ expr KEYWORD: to expr (KEYWORD:step expr)? KEYWORD:then statement
                | (NEWLINE statements KEYWORD:end)

while_exp       : KEYWORD: while expr KEYWORD:then statement
                | (NEWLINE statements KEYWORD:end)

func_def        : KEYWORD: function IDENTIFIER?
                  LPAREN ( IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                  (ARROW expr)
                | (NEWLINE statements KEYWORD:end)